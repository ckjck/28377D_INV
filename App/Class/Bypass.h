/*==========================================================*/ 	
/* Title		:	Bypass.h								*/ 	
/* Description	: 	Class_Bypass definition				*/ 	
/* Date			:	Apr.2008								*/ 	
/*==========================================================*/
 #ifndef		BYPASS_H
            
 #define    	BYPASS_H

const	INT16	KBpKVA = 40;		//旁路容量40KVA		
	
	struct	structFlagVbpAB
	{
		UINT16	bVbpA						:5;				//BIT04-00	A相有效值标志  	bVbpa
																		//00000正常
																		//00001保下以下
																		//00010跟下至保下
																		//01000跟上至保上
																		//10000保上以上
		UINT16	bRev0705					:3;				//BIT07-05
		UINT16	bVbpB						:5;				//BIT12-08	B相有效值标志	bVbpb
																		//00000正常
																		//00001保下以下
																		//00010跟下至保下
																		//01000跟上至保上
																		//10000保上以上
		UINT16	bRev1513					:3;             //BIT15-13
		
	};				
	
	
	struct	structFlagVbpFC
	{
		UINT16	bVbpC						:5;				//BIT04-00	C相有效值标志	bVbpc
																		//00000正常
																		//00001保下以下
																		//00010跟下至保下
																		//01000跟上至保上
																		//10000保上以上
		UINT16	bRev0705					:3;		
		UINT16	bVbpF						:5;				//BIT12-08	频率标志		bFbp
																		//00000正常
																		//00001保下以下
																		//00010跟下至保下
																		//01000跟上至保上
																		//10000保上以上  
		UINT16	bRev13						:1;				//BIT13
		UINT16	bVbpMod						:2;				//BIT15-14	矢量快速检测标志0:正常 1:偏低 2:偏高
	};						
	
	struct	structFlagVbpTotal
	{
		UINT16	bBpRange					:2;				//BIT01-00	各相有效值/频率综合	0:正常1:超跟踪范围3:超保护范围				
		UINT16	bBpTptalProtect				:1;				//BIT02		系统超保护状态
		UINT16	bRev03						:1;				//BIT03
		UINT16	bBpTrace					:1;				//BIT04		旁路可跟踪标志0 :不可跟踪	1 :可跟踪（电压保护范围以内，频率跟踪范围以内）							
		UINT16	bBpRangeBak					:2;				//BIT06-05	各相有效值/频率综合备份	0 :不可跟踪	1 :可跟踪（电压保护范围以内，频率跟踪范围以内）											
		UINT16	bBpQk10St					:1;				//Bit07		启动旁路10快速检测
		UINT16	bBpQKfinish					:1;				//Bit08		判断是否进行第一次BP供电的快速检测
		UINT16	bBps10Fast					:1;				//Bit09		第一次10S快判进行中
		UINT16	bBps4FaultDelay				:1;				//BIT10
		UINT16	bBpSTSOpenChkEnable			:1;				//BIT11   旁路上电10s快检允许时此位置1
		UINT16	bRev1412					:3;				//BIT14-12
		UINT16	bBpInvtSeq					:1;				//BIT15		旁路反序	0:正常1:反序											
	};	
	struct	structBpAmpRangeFlag
	{
		UINT16	bLocalWide					:1;				//BIT00		本机旁路幅值范围标志 0:窄范围1:宽范围	
		UINT16	bLocalWideBak				:1;				//BIT01		本机旁路幅值范围标志备份  0:窄范围1:宽范围		
		UINT16	bParaWide					:1;				//BIT02		并机系统旁路幅值范围标志  0:窄范围1:宽范围		
		UINT16	bParaWideBak				:1;				//BIT03		并机系统旁路幅值范围标志备份  0:窄范围1:宽范围					
	 	UINT16	bCANWide					:1;				//BIT04		CAN通信收到的系统旁路幅值范围标志 0:窄范围1:宽范围
	 	UINT16	bRev1505					:11;			//BIT15-05
	};

	//By wxw20090531 增加旁路电流过流标志
	struct	structBpOvCurrFlagABC
	{
		UINT16	bBpA					:4;					//BIT03-00	旁路A相过流标志	bBpA
																		//00000 100%以下
																		//00001 100%-125%
																		//00011 125%-150%
																		//00111 150%-400%
																		//01111	>400%
		UINT16	bBpB					:4;					//BIT04-07	旁路B相过流标志	bBpB
																		//00000 100%以下
																		//00001 100%-125%
																		//00011 125%-150%
																		//00111 150%-400%
																		//01111	>400%
		UINT16	bBpC					:4;					//BIT08-11	旁路C相过流标志	bBpC
																		//00000 100%以下
																		//00001 100%-125%
																		//00011 125%-150%
																		//00111 150%-400%
																		//01111	>400%
		UINT16	bRev12to15				:4;
	};											

	struct	structBpOvCurrFlagTotal
	{
		UINT16	bTotal					:4;					//BIT0-3	总过流标志	bTotal
																		//00000 105%以下
																		//00001 105%-125%
																		//00011 125%-150%
																		//00111 150%-400%
																		//01111	>400%
		UINT16	bIbpOverTimeOut			:1;					//BIT4		//旁路电流过流延时标志
																		//0:延时未完成。1:延时已完成.
		UINT16	bRev05					:1;					//BIT5		//保留		

		UINT16	bIbpOverFault			:1;					//BIT06		//旁路过流禁止用户开机

		UINT16	bRev7to15				:9;
	};
class Class_Bypass
	{
	public:
		volatile struct	structFlagVbpTotal		m_st_FlagVbpTotal,m_st_FlagVbpTotalWide;		//旁路电压总标志
		volatile struct	structBpAmpRangeFlag	m_st_wBpAmpRangeFlag;						//旁路幅值范围标志
		//Bywxw20090531 Adapter20K增加旁路电流标志
		volatile struct structBpOvCurrFlagABC	m_st_FlagIbpABC; //旁路ABC电流标志
		volatile struct structBpOvCurrFlagTotal	m_st_FlagIbpTotal; //旁路电流总标志标志




		INT16		m_i16VbpaPrms;				//旁路A相电压即时有效值	
		INT16		m_i16VbpbPrms;				//旁路B相电压即时有效值
		INT16		m_i16VbpcPrms;				//旁路C相电压即时有效值
		UNLONG		m_unVbpaRms;				//旁路A相电压有效值(含滤波尾数)	
		UNLONG		m_unVbpbRms;				//旁路B相电压有效值(含滤波尾数)		
		UNLONG		m_unVbpcRms;				//旁路C相电压有效值(含滤波尾数)	  
		INT16		m_i16Vbpa_0;				//A相旁路电压
		INT16		m_i16Vbpb_0;				//B相旁路电压
		INT16		m_i16Vbpc_0;				//C相旁路电压
		INT16		m_i16VbpaOld_0;				//A相旁路电压
		INT16		m_i16TbpCnt_0;
		INT16		m_i16VbpCrossCnt;
		UINT32		m_u32Tbp;
		UINT32		m_u32TbpClk_0;
		UINT32		m_u32TbpClkOld_0;
		
		UNLONG		m_unDthetaBpBase_0;		//旁路矢量角基本步长
		INT16		m_i16SinQBp_0;				//旁路矢量角正弦值
		INT16		m_i16CosQBp_0;				//旁路矢量角余弦值	
		UNLONG		m_unVbpMMean_0;			//旁路电压模滤波值
		INT16		m_i16FbpMean;				//旁路平均频率
		
		INT16 		m_i16FbpUpTrace;			//旁路频率跟踪范围上限
		INT16 		m_i16FbpDnTrace;			//旁路频率跟踪范围下限
		INT16 		m_i16FbpUpLimit;			//旁路频率保护范围上限
		INT16 		m_i16FbpDnLimit;			//旁路频率保护范围下限
		INT16 		m_i16VbpUplimit;			//旁路保护范围上限	 	
		INT16 		m_i16VbpDnlimit;			//旁路保护范围下限
		
		INT16		m_i16PointcntBp_0;			//旁路电压累加点数,中断累加用(注意：逆变过零点数在VAR16维护)
		INT16		m_i16PointcntBpM_0;			//旁路电压周期点数,主程序求有效值用
		INT16		m_i16VbpMDnlimitFast;		//用于判断ECO走简单or 非简单的旁路模值阀值
		INT16		m_i16VbpMUplimitFast;
		INT16		m_i16DthetaBpUplimitFast;
		INT16		m_i16DthetaBpDnlimitFast;
		
	private:
		volatile struct	structFlagVbpAB			m_st_FlagVbpAB,m_st_FlagVbpAB1,m_st_FlagVbpAB2;		//旁路A,B相电压标志
		volatile struct	structFlagVbpFC			m_st_FlagVbpFC,m_st_FlagVbpFC1,m_st_FlagVbpFC2;		//旁路频率,C相电压标志

		INT16		m_i16Vbpab_0;				//AB旁路线电压
		INT16		m_i16Vbpbc_0;				//BC旁路线电压
		INT16		m_i16Vbpca_0;				//CA旁路线电压

		INT16		m_i16FbpRangIndex;			//iwFbpLimitSet*4 + m_i16FbpTraceSet		
									
		INT16 		m_i16VbpDnlimit1;			//旁路保护范围下限（窄范围） 
		INT16 		m_i16VbpUpDnlimitSet1;		//窄旁路保护范围设置编号 4*VbpUplimitSet+VbpDnlimitSet
		INT16 		m_i16VbpUpDnlimitSet2;		//宽旁路保护范围设置编号 4*VbpUplimitSet+4							
    	
    	INT16		m_i16KVbpNormal;
    	INT16		m_i16KVbpa_0;				//旁路AB线电压定标系数  
		INT16		m_i16KVbpb_0;				//旁路BC线电压定标系数  
		INT16		m_i16KVbpc_0;				//旁路CA线电压定标系数	
		           
//		INT16		m_i16OverCurrPoint;			//旁路过流点变量
		           
		INT16		m_i16VbpM_0;				//旁路电压模值
		INT16		m_i16DthetaBpInst_0;		//旁路矢量角瞬时步长        	               	
		UNLONG		m_unDthetaBpMean_0;		//旁路矢量角平均步长
		
		UNLONG		m_unVbpaFilter_0;			                              
		UNLONG		m_unVbpbFilter_0;			                              
		UNLONG		m_unVbpcFilter_0;
		INT16		m_i16SinQBpFilter_0;
		INT16		m_i16CosQBpFilter_0;
		INT16		m_i16SinQBpOld_0;			//旁路矢量角正弦值
		INT16		m_i16CosQBpOld_0;			//旁路矢量角余弦值
		
		UNLONG		m_unVbpaSum_0;			//旁路A相电压平方累加和,中断累加用
		UNLONG		m_unVbpaSumM_0;			//旁路A相电压平方周期和,主程序求有效值用
		UNLONG		m_unVbpbSum_0;			//旁路B相电压平方累加和,中断累加用
		UNLONG		m_unVbpbSumM_0;			//旁路B相电压平方周期和,主程序求有效值用
		UNLONG		m_unVbpcSum_0;			//旁路C相电压平方累加和,中断累加用
		UNLONG		m_unVbpcSumM_0;			//旁路C相电压平方周期和,主程序求有效值用
	  
		UNLONG		m_unVbpabSum_0;			//旁路AB线电压平方累加和,中断累加用
		UNLONG		m_unVbpabSumM_0;			//旁路AB线电压平方周期和,主程序求有效值用
		UNLONG		m_unVbpbcSum_0;			//旁路BC线电压平方累加和,中断累加用
		UNLONG		m_unVbpbcSumM_0;			//旁路BC线电压平方周期和,主程序求有效值用
		UNLONG		m_unVbpcaSum_0;			//旁路CA线电压平方累加和,中断累加用
		UNLONG		m_unVbpcaSumM_0;			//旁路CA线电压平方周期和,主程序求有效值用
		
		UNLONG		m_unVbpabRms;				//旁路AB线电压有效值(含滤波尾数)
		UNLONG		m_unVbpbcRms;				//旁路BC线电压有效值(含滤波尾数)
		UNLONG		m_unVbpcaRms;				//旁路CA线电压有效值(含滤波尾数)
		
    	
	
		INT16		m_i16VbpabPrms;				//旁路AB线电压即时有效值
		INT16		m_i16VbpbcPrms;				//旁路BC线电压即时有效值		
		INT16		m_i16VbpcaPrms;				//旁路CA线电压即时有效值
		
		INT16 		m_i16Bp10sChkCntPer40ms;	//旁路快速检测计数器	
		INT16		m_i16BpOvCurrCntPer40ms;	//旁路过流确认计数器	
		INT16		m_i16BpInvtCntPer40ms;		//旁路反序确认次数
		          
		INT16		m_i16VbpOKCntPer40ms;		//旁路从超保护到非超保护确认计数
		INT16		m_i16VbpNOKCntPer14ms;		//旁路异常确认计数器
		INT16		m_i16VbpOKWideCntPer40ms;

		//Adpater20K的旁路保护逻辑用变量
		INT16		m_i16Bp1STSOpenCntPer40ms; 	//旁路STS断路确认计数器
		INT16		m_i16OverCurrPoint;	
		INT16 		m_i16FeedbackVcomCnt;
		//旁路过流保护点
		//By wxw20090531 增加旁路电流授权值
		INT16		m_i16IbpaGrant;				//A相旁路电流授权值
		INT16		m_i16IbpbGrant;				//B相旁路电流授权值
		INT16		m_i16IbpcGrant;				//C相旁路电流授权值
		INT16		m_i16OvCurrentDlyCntPer40ms;	//旁路过流确认计数器
		INT16		m_i16VbpMDnlimit1;		//用于判断ECO走简单or 非简单的旁路模值阀值
		//Adapter20 三单旁路过零点检测
		INT16		m_i16VbpaFilter0_0;						//旁路电压滤波后的值
		INT16		m_i16VbpaFilter1_0;						//旁路电压滤波后的值
		INT16		m_i16VbpaFilter2_0;						//旁路电压滤波后的值
		INT16		m_i16VbpaFilter3_0;						//旁路电压滤波后的值
		INT16		m_i16VbpaFilter4_0;						//旁路电压滤波后的值
		INT16		m_i16VbpaFilter5_0;						//旁路电压滤波后的值

		UNLONG		m_unDthetaTemp_0;
		
		
	public:
		void		App_BpVarInit(void);
		void		App_BpParamConfig(void);	
		        	
		void		Dat_Int_BpPreDeal(void);
		void 	Dat_Int_BpCal(void);
		
		void		Dat_BpRMSPower(void);
		        	
		void		Dat_VbpFlag(void);
		        	
		void		Alg_BpSeqFault(void);
		void		Alg_BpFault(void);
		
		//By wxw20090430 Adapter_20K 增加旁路保护模块
		void		Alg_BpBackFeedFault(void);
		void		Alg_OvcurrFault(void);
		//By wxw20090531 Adapter_20K 增加旁路过流关断输出功能
		//由下面三个模块组成
		void		Dat_TempCurrentGrant(void);
		void		Dat_IbpFlag(void);
		void		App_OverCurrentDelay(void);
		//已查明DSPCrazy
		void		CheckBypassK(void);
		void		CheckBypass(void);

	friend class Class_Transfer;
	friend class Class_MonitorInterface;

	};

	
	

//旁路标志处理模块Dat_VbpFlag()

//旁路保护范围	上限 ＋15％（＋10％,20%）
//			  	下限 －20％（－10％  －30％  －40％	－50％）
//			   	频率 ＋－10％（＋－20％	＋－5％	＋－2.5％）

//旁路跟踪范围	上限 ＋10％
//			  	下限 －10％
//			   	频率  +-2Hz(+-1Hz,+-3Hz,+-0.5Hz) 
	
const FLAG_TABLE VbpRangeTable[15] =
{	
	
	
	//0:	(+15% -20%  5): 0-80%-90%-110%-115%-200%; -20% -10% +10% +15%
	{ 
		5,
	  	14,
	  	{0,	834,	936,	1113,	1164,	2048},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},	
	
	//1:	(+15% -10%  4): 0-90%-110%-115%-200%;  	 -10% +10% +15%
	{ 
		4,
	  	14,
	  	{0,	936,	1113,	1164,	2048},
	  	{	0x01,	0x00,	0x08,	0x10}
	},	
	
	//2:	(+15% -30%  5): 0-70%-90%-110%-115%-200%; -30% -10% +10% +15%
	{ 
		5,
	  	14,
	  	{0,	731,	936,	1113,	1164,	2048},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//3:	(+15% -40%  5): 0-60%-90%-110%-115%-200%; -40% -10% +10% +15%
	{ 
		5,
	  	14,
	  	{0,	628,	936,	1113,	1164,	2048},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//4:	(+15% -50%  5): 0-60%-90%-110%-115%-200%; -50% -10% +10% +15%
	{ 
		5,
	  	14,
	  	{0,	526,	936,	1113,	1164,	2048},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	//5:	(+10% -20%  4): 0-80%-90%-110%-200%; 		-20% -10% +10% 
	{ 
		4,
	  	14,
	  	{0,	834,	936,	1113,	2048},
	  	{	0x01,	0x02,	0x00,	0x10}
	},
	
	//1:	(+10% -10%  3): 0-90%-110%-200%; 		 	 -10% +10% 
	{ 
		3,
	  	14,
	  	{0,	936,	1113,	2048},
	  	{	0x01,	0x00,	0x10}
	},
		
	//2:	(+10% -30%  4): 0-70%-90%-110%-200%; 		-30% -10% +10% 
	{ 
		4,
	  	14,
	  	{0,	731,	936,	1113,	2048},
	  	{	0x01,	0x02,	0x00,	0x10}
	},
	
	//3:	(+10% -40%  4): 0-60%-90%-110%-200%; 		-40% -10% +10% 
	{ 
		4,
	  	14,
	  	{0,	628,	936,	1113,	2048},
	  	{	0x01,	0x02,	0x00,	0x10}
	},
	
	//4:	(+10% -50%  4): 0-60%-90%-110%-200%; 		-50% -10% +10% 
	{ 
		4,
	  	14,
	  	{0,	526,	936,	1113,	2048},
	  	{	0x01,	0x02,	0x00,	0x10}
	},
	//10:(+20% -20% 5):0-80%-90%-110%-120%-200%; -20% -10% +10%  +20%
	{ 
		5,
	  	14,
	  	{0,	834,	936,	1113,	1215,	2048},
	  	{	0x01,	0x02,	0x00,	0x08,  	0x10}
	},
	//11:(+20% -10% 5):0-90%-110%-120%-200%;  -10% +10%  +20%
	{ 
		4,
	  	14,
	  	{0,	936,	1113,	1215,	2048},
	  	{	0x01,	0x00,	0x08,	0x10}
	},
	//12:(+20% -30% 5):0-70%-90%-110%-120%-200%; -30% -10% +10%  +20%
	{ 
		5,
	  	14,
	  	{0,	731,	936,	1113,	1215,	2048},
	  	{	0x01,	0x02,	0x00,	0x08,  	0x10}
	},
	//13:(+20% -40% 5):0-60%-90%-110%-115%-200%; -40% -10% +10%  +20%
	{ 
		5,
	  	14,
	  	{0,	628,	936,	1113,	1215,	2048},
	  	{	0x01,	0x02,	0x00,	0x08,  	0x10}
	},
	//14:(+20% -50% 5):0-60%-90%-110%-115%-200%; -50% -10% +10%  +20%
	{ 
		5,
	  	14,
	  	{0,	526,	936,	1113,	1215,	2048},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
};

//50Hz频率表
const FLAG_TABLE Fbp50HzTable[18] =
{
	
	//4:	(+-20% +-2Hz	5):  0 	4000	4800	5200	6000	9999 
	{ 
		5,
	  	10,
	  	{0, 4000,	4800,	5200,	6000,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//5:	(+-20% +-1Hz	5):  0 	4000	4900	5100	6000	9999 
	{ 
		5,
	  	10,
	  	{0, 4000,	4900,	5100,	6000,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//6:	(+-20% +-3Hz	5):  0 	4000	4700	5300	6000	9999 
	{ 
		5,
	  	10,
	  	{0, 4000,	4700,	5300,	6000,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//7:	(+-20% +-0.5Hz	5):  0 	4000	4950	5050	6000	9999 
	{ 
		5,
	  	10,
	  	{0, 4000,	4950,	5050,	6000,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	//0:	(+-10% +-2Hz	5):  0 	4500	4800	5200	5500	9999 
	{ 
		5,
	  	10,
	  	{0, 4500,	4800,	5200,	5500,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//1:	(+-10% +-1Hz	5):  0 	4500	4900	5100	5500	9999 
	{ 
		5,
	  	10,
	  	{0, 4500,	4900,	5100,	5500,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//2:	(+-10% +-3Hz	5):  0 	4500	4700	5300	5500	9999 
	{ 
		5,
	  	10,
	  	{0, 4500,	4700,	5300,	5500,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//3:	(+-10% +-0.5Hz	5):  0 	4500	4950	5050	5500	9999 
	{ 
		5,
	  	10,
	  	{0, 4500,	4950,	5050,	5500,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},


	//8:	(+-5% +-2Hz	5):  0 	4750	4800	5200	5250	9999 
	{ 
		5,
	  	10,
	  	{0, 4750,	4800,	5200,	5250,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},

	//9:	(+-5% +-1Hz	5):  0 	4750	4900	5100	5250	9999 
	{ 
		5,
	  	10,
	  	{0, 4750,	4900,	5100,	5250,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},

	//10:	(+-5% +-3Hz	5):  0 	4700	4700	5300	5300	9999 
	{ 
		5,
	  	10,
	  	{0, 4700,	4700,	5300,	5300,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//11:	(+-5% +-0.5Hz	5):  0 	4750	4950	5050	5250	9999 
	{ 
		5,
	  	10,
	  	{0, 4750,	4950,	5050,	5250,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},

	//12:	(+-2.5% +-2Hz	5):  0 	4800	4800	5200	5200	9999 
	{ 
		5,
	  	10,
	  	{0, 4800,	4800,	5200,	5200,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},

	//13:	(+-2.5% +-1Hz	5):  0 	4875	4900	5100	5125	9999 
	{ 
		5,
	  	10,
	  	{0, 4875,	4900,	5100,	5125,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},

	//14:	(+-2.5% +-3Hz	5):  0 	4700	4700	5300	5300	9999 
	{ 
		5,
	  	10,
	  	{0, 4700,	4700,	5300,	5300,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//15:	(+-2.5% +-0.5Hz	5):  0 	4875	4950	5050	5125	9999 
	{ 
		5,
	  	10,
	  	{0, 4875,	4950,	5050,	5125,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},

	//16:  (+-20% +-8%	5):  0 	4000	4600	5400	6000	9999
	{ 
		5,
	  	10,
	  	{0, 4000,	4600,	5400,	6000,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//17:  (+-10% +-8%	5):  0 	4500	4600	5400	5500	9999
	{ 
		5,
	  	10,
	  	{0, 4500,	4600,	5400,	5500,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	}
};

//60Hz频率表
const FLAG_TABLE Fbp60HzTable[18] =
{
	

	//4:	(+-20% +-2Hz	5):  0 	4800	5800	6200	7200	9999 
	{ 
		5,
	  	10,
	  	{0, 4800,	5800,	6200,	7200,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//5:	(+-20% +-1Hz	5):  0 	4800	5900	6100	7200	9999 
	{ 
		5,
	  	10,
	  	{0, 4800,	5900,	6100,	7200,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//6:	(+-20% +-3Hz	5):  0 	4800	5700	6300	7200	9999 
	{ 
		5,
	  	10,
	  	{0, 4800,	5700,	6300,	7200,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//7:	(+-20% +-0.5Hz	5):  0 	4800	5950	6050	7200	9999 
	{ 
		5,
	  	10,
	  	{0, 4800,	5950,	6050,	7200,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	//0:	(+-10% +-2Hz	5):  0 	5400	5800	6200	6600	9999 
	{ 
		5,
	  	10,
	  	{0, 5400,	5800,	6200,	6600,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//1:	(+-10% +-1Hz	5):  0 	5400	5900	6100	6600	9999 
	{ 
		5,
	  	10,
	  	{0, 5400,	5900,	6100,	6600,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//2:	(+-10% +-3Hz	5):  0 	5400	5700	6300	6600	9999 
	{ 
		5,
	  	10,
	  	{0, 5400,	5700,	6300,	6600,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//3:	(+-10% +-0.5Hz	5):  0 	5400	5950	6050	6600	9999 
	{ 
		5,
	  	10,
	  	{0, 5400,	5950,	6050,	6600,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//8:	(+-5% +-2Hz	5):  0 	5700	5800	6200	6300	9999 
	{ 
		5,
	  	10,
	  	{0, 5700,	5800,	6200,	6300,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},

	//9:	(+-5% +-1Hz	5):  0 	5700	5900	6100	6300	9999 
	{ 
		5,
	  	10,
	  	{0, 5700,	5900,	6100,	6300,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},

	//10:	(+-5% +-3Hz	5):  0 	5700	5700	6300	6300	9999 
	{ 
		5,
	  	10,
	  	{0, 5700,	5700,	6300,	6300,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},

	//11:	(+-5% +-0.5Hz	5):  0 	5700	5950	6050	6300	9999 
	{ 
		5,
	  	10,
	  	{0, 5700,	5950,	6050,	6300,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},

	//12:	(+-2.5% +-2Hz	5):  0 	5800	5800	6200	6200	9999 
	{ 
		5,
	  	10,
	  	{0, 5800,	5800,	6200,	6200,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},

	//13:	(+-2.5% +-1Hz	5):  0 	5850	5900	6100	6150	9999 
	{ 
		5,
	  	10,
	  	{0, 5850,	5900,	6100,	6150,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},

	//14:	(+-2.5% +-3Hz	5):  0 	5700	5700	6300	6300	9999 
	{ 
		5,
	  	10,
	  	{0, 5700,	5700,	6300,	6300,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},

	//15:	(+-2.5% +-0.5Hz	5):  0 	5850	5950	6050	6150	9999 
	{ 
		5,
	  	10,
	  	{0, 5850,	5950,	6050,	6150,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},

	//16:  (+-20% +-8%	5):  0 	4800	4500	5500	7200	9999
	{ 
		5,
	  	10,
	  	{0, 4800,	5520,	6480,	7200,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	},
	
	//17:  (+-10% +-8%	5):  0 	5400	5520	6480	6600	9999
	{ 
		5,
	  	10,
	  	{0, 5400,	5520,	6480,	6600,	9999},
	  	{	0x01,	0x02,	0x00,	0x08,	0x10}
	}
	
}; 

//By wxw20090531 增加旁路电流过流表
const FLAG_TABLE BpCurrentTable =
{ 
	5,
  	26,
  	{0, 1075, 1280, 1536, 4096, 10000},
  	{0x0000, 0x0001, 0x0003, 0x0007, 0x000f}
};

#endif
//===========================================================================
// End of file.
//===========================================================================
